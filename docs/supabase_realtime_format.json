{
  "realtime_events": {
    "event_detection": {
      "table": "event_detections",
      "event_type": "INSERT",
      "format": {
        "event_id": "uuid",
        "user_id": "uuid",
        "camera_id": "uuid", 
        "room_id": "uuid",
        "snapshot_id": "uuid (optional)",
        "event_type": "fall_detection | seizure_detection | other",
        "event_description": "string",
        "detection_data": {
          "detection_type": "fall | seizure",
          "algorithm": "yolo_pose | vsvig_temporal",
          "model_version": "string",
          "processing_time_ms": "number"
        },
        "ai_analysis_result": {
          "confidence_score": "number (0-1)",
          "risk_level": "low | medium | high | critical",
          "recommended_action": "string"
        },
        "confidence_score": "number (0-1)",
        "bounding_boxes": [
          {
            "x": "number",
            "y": "number", 
            "width": "number",
            "height": "number",
            "class": "person",
            "confidence": "number"
          }
        ],
        "status": "detected | verified | dismissed",
        "context_data": {
          "motion_level": "number",
          "detection_type": "direct | confirmation",
          "confirmation_frames": "number",
          "temporal_ready": "boolean",
          "processing_time": "number",
          "frame_number": "number"
        },
        "detected_at": "ISO datetime",
        "created_at": "ISO datetime"
      },
      "example": {
        "event_id": "123e4567-e89b-12d3-a456-426614174000",
        "user_id": "456e7890-e89b-12d3-a456-426614174001",
        "camera_id": "789e0123-e89b-12d3-a456-426614174002",
        "room_id": "012e3456-e89b-12d3-a456-426614174003",
        "snapshot_id": "345e6789-e89b-12d3-a456-426614174004",
        "event_type": "fall_detection",
        "event_description": "Fall detected with 0.85 confidence",
        "detection_data": {
          "detection_type": "fall",
          "algorithm": "yolo_pose",
          "model_version": "1.0",
          "processing_time_ms": 45
        },
        "ai_analysis_result": {
          "confidence_score": 0.85,
          "risk_level": "high",
          "recommended_action": "immediate_assistance"
        },
        "confidence_score": 0.85,
        "bounding_boxes": [
          {
            "x": 100,
            "y": 150,
            "width": 200,
            "height": 300,
            "class": "person",
            "confidence": 0.95
          }
        ],
        "status": "detected",
        "context_data": {
          "motion_level": 0.75,
          "detection_type": "direct",
          "confirmation_frames": 0,
          "temporal_ready": true,
          "processing_time": 0.045,
          "frame_number": 1250
        },
        "detected_at": "2025-08-14T10:30:45.123Z",
        "created_at": "2025-08-14T10:30:45.123Z"
      }
    },
    
    "alert": {
      "table": "alerts",
      "event_type": "INSERT",
      "format": {
        "alert_id": "uuid",
        "event_id": "uuid",
        "user_id": "uuid",
        "alert_type": "fall_detected | seizure_detected | other",
        "severity": "low | medium | high | critical",
        "alert_message": "string",
        "alert_data": {
          "confidence": "number",
          "image_path": "string (optional)",
          "bounding_boxes": "array",
          "timestamp": "ISO datetime"
        },
        "status": "active | acknowledged | resolved",
        "created_at": "ISO datetime"
      },
      "example": {
        "alert_id": "678e9012-e89b-12d3-a456-426614174005",
        "event_id": "123e4567-e89b-12d3-a456-426614174000", 
        "user_id": "456e7890-e89b-12d3-a456-426614174001",
        "alert_type": "fall_detected",
        "severity": "high",
        "alert_message": "Fall detected with 85% confidence. Immediate attention required.",
        "alert_data": {
          "confidence": 0.85,
          "image_path": "/alerts/fall_detected_20250814_103045.jpg",
          "bounding_boxes": [
            {
              "x": 100,
              "y": 150,
              "width": 200,
              "height": 300,
              "class": "person",
              "confidence": 0.95
            }
          ],
          "timestamp": "2025-08-14T10:30:45.123Z"
        },
        "status": "active",
        "created_at": "2025-08-14T10:30:45.123Z"
      }
    },

    "snapshot": {
      "table": "snapshots",
      "event_type": "INSERT", 
      "format": {
        "snapshot_id": "uuid",
        "camera_id": "uuid",
        "room_id": "uuid",
        "user_id": "uuid",
        "image_path": "string",
        "cloud_url": "string (optional)",
        "metadata": {
          "detection_type": "fall | seizure",
          "confidence": "number",
          "timestamp": "ISO datetime"
        },
        "capture_type": "scheduled | alert | manual",
        "captured_at": "ISO datetime",
        "is_processed": "boolean"
      },
      "example": {
        "snapshot_id": "345e6789-e89b-12d3-a456-426614174004",
        "camera_id": "789e0123-e89b-12d3-a456-426614174002",
        "room_id": "012e3456-e89b-12d3-a456-426614174003",
        "user_id": "456e7890-e89b-12d3-a456-426614174001",
        "image_path": "/data/saved_frames/alerts/fall_detected_20250814_103045.jpg",
        "cloud_url": "https://storage.supabase.co/v1/object/public/snapshots/fall_detected_20250814_103045.jpg",
        "metadata": {
          "detection_type": "fall",
          "confidence": 0.85,
          "timestamp": "2025-08-14T10:30:45.123Z"
        },
        "capture_type": "alert",
        "captured_at": "2025-08-14T10:30:45.123Z",
        "is_processed": false
      }
    }
  },

  "client_integration_examples": {
    "javascript_supabase_realtime": {
      "setup": "npm install @supabase/supabase-js",
      "code": "const { createClient } = require('@supabase/supabase-js');\nconst supabase = createClient('YOUR_SUPABASE_URL', 'YOUR_SUPABASE_ANON_KEY');\n\n// Listen for new event detections\nsupabase\n  .channel('healthcare_events')\n  .on('postgres_changes', {\n    event: 'INSERT',\n    schema: 'public',\n    table: 'event_detections'\n  }, (payload) => {\n    console.log('New event detected:', payload.new);\n    handleEventDetection(payload.new);\n  })\n  .on('postgres_changes', {\n    event: 'INSERT',\n    schema: 'public', \n    table: 'alerts'\n  }, (payload) => {\n    console.log('New alert:', payload.new);\n    handleAlert(payload.new);\n  })\n  .subscribe();\n\nfunction handleEventDetection(event) {\n  // Handle new event detection\n  if (event.event_type === 'fall_detection') {\n    showFallAlert(event);\n  } else if (event.event_type === 'seizure_detection') {\n    showSeizureAlert(event);\n  }\n}\n\nfunction handleAlert(alert) {\n  // Handle new alert\n  displayNotification(alert.alert_message, alert.severity);\n}"
    },

    "python_supabase_listener": {
      "setup": "pip install supabase",
      "code": "from supabase import create_client, Client\nimport json\n\n# Initialize client\nurl = 'YOUR_SUPABASE_URL'\nkey = 'YOUR_SUPABASE_ANON_KEY'\nsupabase: Client = create_client(url, key)\n\ndef handle_event_detection(payload):\n    event = payload['new']\n    print(f\"New {event['event_type']} detected:\")\n    print(f\"Confidence: {event['confidence_score']}\")\n    print(f\"Description: {event['event_description']}\")\n    \n    # Send notification, update UI, etc.\n    if event['event_type'] == 'fall_detection':\n        send_fall_notification(event)\n    elif event['event_type'] == 'seizure_detection':\n        send_seizure_notification(event)\n\ndef handle_alert(payload):\n    alert = payload['new']\n    print(f\"New alert: {alert['alert_message']}\")\n    print(f\"Severity: {alert['severity']}\")\n    \n    # Handle alert based on severity\n    if alert['severity'] in ['high', 'critical']:\n        send_emergency_notification(alert)\n\n# Subscribe to realtime events\nsupabase.realtime.channel('healthcare_events').on(\n    'postgres_changes',\n    {'event': 'INSERT', 'schema': 'public', 'table': 'event_detections'},\n    handle_event_detection\n).on(\n    'postgres_changes', \n    {'event': 'INSERT', 'schema': 'public', 'table': 'alerts'},\n    handle_alert\n).subscribe()"
    }
  },

  "webhook_integration": {
    "description": "For external systems that need to receive healthcare events via HTTP webhooks",
    "setup": {
      "1": "Create webhook endpoint in your application",
      "2": "Configure Supabase Edge Functions or use a service like Zapier",
      "3": "Set up database triggers to call your webhook on INSERT"
    },
    "webhook_payload_example": {
      "event_type": "healthcare.fall_detected",
      "timestamp": "2025-08-14T10:30:45.123Z",
      "data": {
        "event_id": "123e4567-e89b-12d3-a456-426614174000",
        "user_id": "456e7890-e89b-12d3-a456-426614174001",
        "event_type": "fall_detection",
        "confidence": 0.85,
        "severity": "high",
        "message": "Fall detected with 85% confidence. Immediate attention required.",
        "image_url": "https://storage.supabase.co/v1/object/public/snapshots/fall_detected_20250814_103045.jpg",
        "context": {
          "camera_id": "789e0123-e89b-12d3-a456-426614174002",
          "room_id": "012e3456-e89b-12d3-a456-426614174003",
          "motion_level": 0.75
        }
      }
    }
  },

  "api_endpoints": {
    "description": "REST API endpoints for querying healthcare data",
    "base_url": "https://your-project.supabase.co/rest/v1",
    "headers": {
      "Authorization": "Bearer YOUR_SUPABASE_ANON_KEY",
      "apikey": "YOUR_SUPABASE_ANON_KEY",
      "Content-Type": "application/json"
    },
    "endpoints": {
      "get_recent_events": {
        "method": "GET",
        "url": "/event_detections?order=created_at.desc&limit=10",
        "description": "Get 10 most recent event detections"
      },
      "get_active_alerts": {
        "method": "GET", 
        "url": "/alerts?status=eq.active&order=created_at.desc",
        "description": "Get all active alerts"
      },
      "get_user_events": {
        "method": "GET",
        "url": "/event_detections?user_id=eq.USER_ID&order=created_at.desc",
        "description": "Get events for specific user"
      },
      "acknowledge_alert": {
        "method": "PATCH",
        "url": "/alerts?id=eq.ALERT_ID",
        "body": {
          "status": "acknowledged",
          "acknowledged_at": "2025-08-14T10:30:45.123Z",
          "acknowledged_by": "USER_ID"
        },
        "description": "Mark alert as acknowledged"
      }
    }
  }
}
